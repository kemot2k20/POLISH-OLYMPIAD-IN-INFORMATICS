#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 5e5+5;

int n, q;
ll t[2*N], lazy[2*N];

//void build(vector<int> a) {
	//for (int i = 0; i < n; i ++) t[i+n] = a[i];
	//for (int i = n-1; i > 1; i --) t[i] = t[i<<1] + t[(i<<1)+1];
//}

void push(int v, int l1, int r1) {
	t[v] += lazy[v] * (r1 - l1);
	if (v < N) {
		lazy[v<<1] += lazy[v];
		lazy[v<<1|1] += lazy[v];
	}
	lazy[v] = 0;
}

ll query(int l, int r, int l1 = 0, int r1 = N, int v = 1) {
	push(v, l1, r1);
	if (l >= r1 || r <= l1) return 0;
	if (l <= l1 && r >= r1) return t[v];
	int mid = (l1 + r1)/2;
	return min(query(l, r, l1, mid, v<<1), query(l, r, mid, r1, v<<1|1));
}

void update(int l, int r, int x, int l1 = 0, int r1 = N, int v = 1) {
	push(v, l1, r1);
    if(l >= r1 || r <= l1) return;
    if(l <= l1 && r >= r1) {
        lazy[v] += x;
        push(v, l1, r1);
        return;
    }
    int mid = (l1 + r1)/2;
    update(l, r, x, l1, mid, v<<1);
    update(l, r, x, mid, r1, v<<1|1);
    t[v] = t[v<<1] + t[v<<1|1];
}

int main(){
	std::ios::sync_with_stdio(false); 
	cout.tie(0);
	cin.tie(0);
	cin >> n >> q;
	for (int i = 0; i < q; i ++) {
		int kom, l, r;
		cin >> kom >> l >> r;
		if (kom == 1) {
			int x;
			cin >> x;
			update(l, r, x);
		}
		else {
			cout << query(l, r) << '\n';
		}
	}
	return 0;
}
